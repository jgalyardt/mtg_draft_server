Based on this error:

Changeset

    #Ecto.Changeset<
      action: :insert,
      changes: %{
        id: "a471b306-4941-4e46-a0cb-d92895c16f8a",
        name: "Nissa, Worldsoul Speaker",
        colors: ["G"],
        oracle_id: "00037840-6089-42ec-8c5c-281f9f474504",
        mana_cost: "{3}{G}",
        cmc: 4.0,
        type_line: "Legendary Creature — Elf Druid",
        oracle_text: "Landfall — Whenever a land you control enters, you get {E}{E} (two energy counters).\nYou may pay eight {E} rather than pay the mana cost for permanent spells you cast.",
        power: "3",
        toughness: "3",
        color_identity: ["G"],
        rarity: "rare",
        image_uris: %{
          "art_crop" => "https://cards.scryfall.io/art_crop/front/a/4/a471b306-4941-4e46-a0cb-d92895c16f8a.jpg?1738355341",
          "border_crop" => "https://cards.scryfall.io/border_crop/front/a/4/a471b306-4941-4e46-a0cb-d92895c16f8a.jpg?1738355341",
          "large" => "https://cards.scryfall.io/large/front/a/4/a471b306-4941-4e46-a0cb-d92895c16f8a.jpg?1738355341",     
          "normal" => "https://cards.scryfall.io/normal/front/a/4/a471b306-4941-4e46-a0cb-d92895c16f8a.jpg?1738355341",   
          "png" => "https://cards.scryfall.io/png/front/a/4/a471b306-4941-4e46-a0cb-d92895c16f8a.png?1738355341",
          "small" => "https://cards.scryfall.io/small/front/a/4/a471b306-4941-4e46-a0cb-d92895c16f8a.jpg?1738355341"      
        },
        legalities: %{
          "alchemy" => "not_legal",
          "brawl" => "not_legal",
          "commander" => "legal",
          "duel" => "legal",
          "explorer" => "not_legal",
          "future" => "not_legal",
          "gladiator" => "not_legal",
          "historic" => "not_legal",
          "legacy" => "legal",
          "modern" => "not_legal",
          "oathbreaker" => "legal",
          "oldschool" => "not_legal",
          "pauper" => "not_legal",
          "paupercommander" => "not_legal",
          "penny" => "not_legal",
          "pioneer" => "not_legal",
          "predh" => "not_legal",
          "premodern" => "not_legal",
          "standard" => "not_legal",
          "standardbrawl" => "not_legal",
          "timeless" => "not_legal",
          "vintage" => "legal"
        }
      },
      errors: [set_code: {"can't be blank", [validation: :required]}],
      data: #MtgDraftServer.Cards.Card<>,
      valid?: false,
      ...
    >

    (ecto 3.12.5) lib/ecto/repo/schema.ex:316: Ecto.Repo.Schema.insert!/4
    (elixir 1.18.2) lib/enum.ex:987: Enum."-each/2-lists^foreach/1-0-"/2
    priv/repo/seeds.exs:7: (file)
    (elixir 1.18.2) lib/code.ex:1525: Code.require_file/2
    (mix 1.18.2) lib/mix/tasks/run.ex:146: Mix.Tasks.Run.run/5
    (mix 1.18.2) lib/mix/tasks/run.ex:85: Mix.Tasks.Run.run/1
    (mix 1.18.2) lib/mix/task.ex:495: anonymous fn/3 in Mix.Task.run_task/5
    (mix 1.18.2) lib/mix/task.ex:561: Mix.Task.run_alias/6
    (mix 1.18.2) lib/mix/cli.ex:107: Mix.CLI.run_task/2
    c:/Program Files/Elixir/bin/mix:2: (file)

Take a look at my migrations and schema and make help me fix ecto.reset. The incoming data is in the format:

{"object":"card","id":"036ef8c9-72ac-46ce-af07-83b79d736538","oracle_id":"000d5588-5a4c-434e-988d-396632ade42c","multiverse_ids":[83282],"mtgo_id":22609,"mtgo_foil_id":22610,"tcgplayer_id":12835,"cardmarket_id":12551,"name":"Storm Crow","lang":"en","released_at":"2005-07-29","uri":"https://api.scryfall.com/cards/036ef8c9-72ac-46ce-af07-83b79d736538","scryfall_uri":"https://scryfall.com/card/9ed/100/storm-crow?utm_source=api","layout":"normal","highres_image":true,"image_status":"highres_scan","image_uris":{"small":"https://cards.scryfall.io/small/front/0/3/036ef8c9-72ac-46ce-af07-83b79d736538.jpg?1562730661","normal":"https://cards.scryfall.io/normal/front/0/3/036ef8c9-72ac-46ce-af07-83b79d736538.jpg?1562730661","large":"https://cards.scryfall.io/large/front/0/3/036ef8c9-72ac-46ce-af07-83b79d736538.jpg?1562730661","png":"https://cards.scryfall.io/png/front/0/3/036ef8c9-72ac-46ce-af07-83b79d736538.png?1562730661","art_crop":"https://cards.scryfall.io/art_crop/front/0/3/036ef8c9-72ac-46ce-af07-83b79d736538.jpg?1562730661","border_crop":"https://cards.scryfall.io/border_crop/front/0/3/036ef8c9-72ac-46ce-af07-83b79d736538.jpg?1562730661"},"mana_cost":"{1}{U}","cmc":2.0,"type_line":"Creature — Bird","oracle_text":"Flying (This creature can't be blocked except by creatures with flying or reach.)","power":"1","toughness":"2","colors":["U"],"color_identity":["U"],"keywords":["Flying"],"legalities":{"standard":"not_legal","future":"not_legal","historic":"not_legal","timeless":"not_legal","gladiator":"not_legal","pioneer":"not_legal","explorer":"not_legal","modern":"legal","legacy":"legal","pauper":"legal","vintage":"legal","penny":"legal","commander":"legal","oathbreaker":"legal","standardbrawl":"not_legal","brawl":"not_legal","alchemy":"not_legal","paupercommander":"legal","duel":"legal","oldschool":"not_legal","premodern":"legal","predh":"legal"},"games":["paper","mtgo"],"reserved":false,"foil":false,"nonfoil":true,"finishes":["nonfoil"],"oversized":false,"promo":false,"reprint":true,"variation":false,"set_id":"e70c8572-4732-4e92-a140-b4e3c1c84c93","set":"9ed","set_name":"Ninth Edition","set_type":"core","set_uri":"https://api.scryfall.com/sets/e70c8572-4732-4e92-a140-b4e3c1c84c93","set_search_uri":"https://api.scryfall.com/cards/search?order=set&q=e%3A9ed&unique=prints","scryfall_set_uri":"https://scryfall.com/sets/9ed?utm_source=api","rulings_uri":"https://api.scryfall.com/cards/036ef8c9-72ac-46ce-af07-83b79d736538/rulings","prints_search_uri":"https://api.scryfall.com/cards/search?order=released&q=oracleid%3A000d5588-5a4c-434e-988d-396632ade42c&unique=prints","collector_number":"100","digital":false,"rarity":"common","flavor_text":"Storm crow descending, winter unending. Storm crow departing, summer is starting.","card_back_id":"0aeebaf5-8c7d-4636-9e82-8c27447861f7","artist":"John Matson","artist_ids":["a1685587-4b55-446b-b420-c37b202ed3f1"],"illustration_id":"d01aa92b-0582-4e1e-a7b0-737b2ad4e462","border_color":"white","frame":"2003","full_art":false,"textless":false,"booster":true,"story_spotlight":false,"edhrec_rank":17868,"penny_rank":13059,"prices":{"usd":"0.08","usd_foil":null,"usd_etched":null,"eur":"0.07","eur_foil":null,"tix":"0.04"},"related_uris":{"gatherer":"https://gatherer.wizards.com/Pages/Card/Details.aspx?multiverseid=83282&printed=false","tcgplayer_infinite_articles":"https://partner.tcgplayer.com/c/4931599/1830156/21018?subId1=api&trafcat=infinite&u=https%3A%2F%2Finfinite.tcgplayer.com%2Fsearch%3FcontentMode%3Darticle%26game%3Dmagic%26q%3DStorm%2BCrow","tcgplayer_infinite_decks":"https://partner.tcgplayer.com/c/4931599/1830156/21018?subId1=api&trafcat=infinite&u=https%3A%2F%2Finfinite.tcgplayer.com%2Fsearch%3FcontentMode%3Ddeck%26game%3Dmagic%26q%3DStorm%2BCrow","edhrec":"https://edhrec.com/route/?cc=Storm+Crow"},"purchase_uris":{"tcgplayer":"https://partner.tcgplayer.com/c/4931599/1830156/21018?subId1=api&u=https%3A%2F%2Fwww.tcgplayer.com%2Fproduct%2F12835%3Fpage%3D1","cardmarket":"https://www.cardmarket.com/en/Magic/Products/Singles/Ninth-Edition/Storm-Crow?referrer=scryfall&utm_campaign=card_prices&utm_medium=text&utm_source=scryfall","cardhoarder":"https://www.cardhoarder.com/cards/22609?affiliate_id=scryfall&ref=card-profile&utm_campaign=affiliate&utm_medium=card&utm_source=scryfall"}},
{"object":"card","id":"6010d06b-33b6-4631-9b3f-192d8c6b96e7","oracle_id":"000d8291-d6a8-436e-9e17-7531333686a8","multiverse_ids":[],"arena_id":91397,"name":"Snarlfang Vermin","lang":"en","released_at":"2024-03-05","uri":"https://api.scryfall.com/cards/6010d06b-33b6-4631-9b3f-192d8c6b96e7","scryfall_uri":"https://scryfall.com/card/ymkm/12/snarlfang-vermin?utm_source=api","layout":"normal","highres_image":true,"image_status":"highres_scan","image_uris":{"small":"https://cards.scryfall.io/small/front/6/0/6010d06b-33b6-4631-9b3f-192d8c6b96e7.jpg?1710340313","normal":"https://cards.scryfall.io/normal/front/6/0/6010d06b-33b6-4631-9b3f-192d8c6b96e7.jpg?1710340313","large":"https://cards.scryfall.io/large/front/6/0/6010d06b-33b6-4631-9b3f-192d8c6b96e7.jpg?1710340313","png":"https://cards.scryfall.io/png/front/6/0/6010d06b-33b6-4631-9b3f-192d8c6b96e7.png?1710340313","art_crop":"https://cards.scryfall.io/art_crop/front/6/0/6010d06b-33b6-4631-9b3f-192d8c6b96e7.jpg?1710340313","border_crop":"https://cards.scryfall.io/border_crop/front/6/0/6010d06b-33b6-4631-9b3f-192d8c6b96e7.jpg?1710340313"},"mana_cost":"{B}","cmc":1.0,"type_line":"Creature — Rat","oracle_text":"Whenever Snarlfang Vermin deals combat damage to a creature, if that creature is still on the battlefield, suspect that creature. It perpetually gains this ability.\nWhenever a suspected creature an opponent controls dies while Snarlfang Vermin is in your graveyard, that opponent loses 1 life.","power":"2","toughness":"1","colors":["B"],"color_identity":["B"],"keywords":[],"legalities":{"standard":"not_legal","future":"not_legal","historic":"legal","timeless":"legal","gladiator":"legal","pioneer":"not_legal","explorer":"not_legal","modern":"not_legal","legacy":"not_legal","pauper":"not_legal","vintage":"not_legal","penny":"not_legal","commander":"not_legal","oathbreaker":"not_legal","standardbrawl":"not_legal","brawl":"legal","alchemy":"legal","paupercommander":"not_legal","duel":"not_legal","oldschool":"not_legal","premodern":"not_legal","predh":"not_legal"},"games":["arena"],"reserved":false,"foil":false,"nonfoil":true,"finishes":["nonfoil"],"oversized":false,"promo":false,"reprint":false,"variation":false,"set_id":"3879667a-f0b8-4bc2-8662-7c861e22b4e9","set":"ymkm","set_name":"Alchemy: Murders at Karlov Manor ","set_type":"alchemy","set_uri":"https://api.scryfall.com/sets/3879667a-f0b8-4bc2-8662-7c861e22b4e9","set_search_uri":"https://api.scryfall.com/cards/search?order=set&q=e%3Aymkm&unique=prints","scryfall_set_uri":"https://scryfall.com/sets/ymkm?utm_source=api","rulings_uri":"https://api.scryfall.com/cards/6010d06b-33b6-4631-9b3f-192d8c6b96e7/rulings","prints_search_uri":"https://api.scryfall.com/cards/search?order=released&q=oracleid%3A000d8291-d6a8-436e-9e17-7531333686a8&unique=prints","collector_number":"12","digital":true,"rarity":"uncommon","card_back_id":"0aeebaf5-8c7d-4636-9e82-8c27447861f7","artist":"Ernanda Souza","artist_ids":["e87a8b19-f97f-4df0-9dda-1310ab0257bb"],"illustration_id":"a34dcd37-7f1d-41ef-85a0-dc537c360a4a","border_color":"black","frame":"2015","security_stamp":"arena","full_art":false,"textless":false,"booster":false,"story_spotlight":false,"promo_types":["alchemy"],"prices":{"usd":null,"usd_foil":null,"usd_etched":null,"eur":null,"eur_foil":null,"tix":null},"related_uris":{"tcgplayer_infinite_articles":"https://partner.tcgplayer.com/c/4931599/1830156/21018?subId1=api&trafcat=infinite&u=https%3A%2F%2Finfinite.tcgplayer.com%2Fsearch%3FcontentMode%3Darticle%26game%3Dmagic%26q%3DSnarlfang%2BVermin","tcgplayer_infinite_decks":"https://partner.tcgplayer.com/c/4931599/1830156/21018?subId1=api&trafcat=infinite&u=https%3A%2F%2Finfinite.tcgplayer.com%2Fsearch%3FcontentMode%3Ddeck%26game%3Dmagic%26q%3DSnarlfang%2BVermin","edhrec":"https://edhrec.com/route/?cc=Snarlfang+Vermin"}},
{"object":"card","id":"b125d1e7-5d9b-4997-88b0-71bdfc19c6f2","oracle_id":"000e5d65-96c3-498b-bd01-72b1a1991850","multiverse_ids":[12380],"mtgo_id":12637,"mtgo_foil_id":12638,"tcgplayer_id":6412,"cardmarket_id":10604,"name":"Walking Sponge","lang":"en","released_at":"1999-02-15","uri":"https://api.scryfall.com/cards/b125d1e7-5d9b-4997-88b0-71bdfc19c6f2","scryfall_uri":"https://scryfall.com/card/ulg/47/walking-sponge?utm_source=api","layout":"normal","highres_image":true,"image_status":"highres_scan","image_uris":{"small":"https://cards.scryfall.io/small/front/b/1/b125d1e7-5d9b-4997-88b0-71bdfc19c6f2.jpg?1562863790","normal":"https://cards.scryfall.io/normal/front/b/1/b125d1e7-5d9b-4997-88b0-71bdfc19c6f2.jpg?1562863790","large":"https://cards.scryfall.io/large/front/b/1/b125d1e7-5d9b-4997-88b0-71bdfc19c6f2.jpg?1562863790","png":"https://cards.scryfall.io/png/front/b/1/b125d1e7-5d9b-4997-88b0-71bdfc19c6f2.png?1562863790","art_crop":"https://cards.scryfall.io/art_crop/front/b/1/b125d1e7-5d9b-4997-88b0-71bdfc19c6f2.jpg?1562863790","border_crop":"https://cards.scryfall.io/border_crop/front/b/1/b125d1e7-5d9b-4997-88b0-71bdfc19c6f2.jpg?1562863790"},"mana_cost":"{1}{U}","cmc":2.0,"type_line":"Creature — Sponge","oracle_text":"{T}: Target creature loses your choice of flying, first strike, or trample until end of turn.","power":"1","toughness":"1","colors":["U"],"color_identity":["U"],"keywords":[],"legalities":{"standard":"not_legal","future":"not_legal","historic":"not_legal","timeless":"not_legal","gladiator":"not_legal","pioneer":"not_legal","explorer":"not_legal","modern":"not_legal","legacy":"legal","pauper":"not_legal","vintage":"legal","penny":"legal","commander":"legal","oathbreaker":"legal","standardbrawl":"not_legal","brawl":"not_legal","alchemy":"not_legal","paupercommander":"not_legal","duel":"legal","oldschool":"not_legal","premodern":"legal","predh":"legal"},"games":["paper","mtgo"],"reserved":false,"foil":true,"nonfoil":true,"finishes":["nonfoil","foil"],"oversized":false,"promo":false,"reprint":false,"variation":false,"set_id":"78ced61b-4b8a-4b33-b6b2-f5bd66f1a75a","set":"ulg","set_name":"Urza's Legacy","set_type":"expansion","set_uri":"https://api.scryfall.com/sets/78ced61b-4b8a-4b33-b6b2-f5bd66f1a75a","set_search_uri":"https://api.scryfall.com/cards/search?order=set&q=e%3Aulg&unique=prints","scryfall_set_uri":"https://scryfall.com/sets/ulg?utm_source=api","rulings_uri":"https://api.scryfall.com/cards/b125d1e7-5d9b-4997-88b0-71bdfc19c6f2/rulings","prints_search_uri":"https://api.scryfall.com/cards/search?order=released&q=oracleid%3A000e5d65-96c3-498b-bd01-72b1a1991850&unique=prints","collector_number":"47","digital":false,"rarity":"uncommon","flavor_text":"Not only does it catch fish, it cleans them too.","card_back_id":"0aeebaf5-8c7d-4636-9e82-8c27447861f7","artist":"Ron Spencer","artist_ids":["dab52c11-0564-4207-a4a1-c1735c946a65"],"illustration_id":"32958190-1a5b-4e24-9e5d-aa7bf1869fcd","border_color":"black","frame":"1997","full_art":false,"textless":false,"booster":true,"story_spotlight":false,"edhrec_rank":23884,"prices":{"usd":"0.25","usd_foil":"4.90","usd_etched":null,"eur":"0.10","eur_foil":"1.75","tix":"0.09"},"related_uris":{"gatherer":"https://gatherer.wizards.com/Pages/Card/Details.aspx?multiverseid=12380&printed=false","tcgplayer_infinite_articles":"https://partner.tcgplayer.com/c/4931599/1830156/21018?subId1=api&trafcat=infinite&u=https%3A%2F%2Finfinite.tcgplayer.com%2Fsearch%3FcontentMode%3Darticle%26game%3Dmagic%26q%3DWalking%2BSponge","tcgplayer_infinite_decks":"https://partner.tcgplayer.com/c/4931599/1830156/21018?subId1=api&trafcat=infinite&u=https%3A%2F%2Finfinite.tcgplayer.com%2Fsearch%3FcontentMode%3Ddeck%26game%3Dmagic%26q%3DWalking%2BSponge","edhrec":"https://edhrec.com/route/?cc=Walking+Sponge"},"purchase_uris":{"tcgplayer":"https://partner.tcgplayer.com/c/4931599/1830156/21018?subId1=api&u=https%3A%2F%2Fwww.tcgplayer.com%2Fproduct%2F6412%3Fpage%3D1","cardmarket":"https://www.cardmarket.com/en/Magic/Products/Singles/Urzas-Legacy/Walking-Sponge?referrer=scryfall&utm_campaign=card_prices&utm_medium=text&utm_source=scryfall","cardhoarder":"https://www.cardhoarder.com/cards/12637?affiliate_id=scryfall&ref=card-profile&utm_campaign=affiliate&utm_medium=card&utm_source=scryfall"}},

=== File: lib/mtg_draft_server/application.ex ===

defmodule MtgDraftServer.Application do
  use Application

  @impl true
  def start(_type, _args) do
    children = [
      MtgDraftServerWeb.Telemetry,
      MtgDraftServer.Repo,
      {DNSCluster, query: Application.get_env(:mtg_draft_server, :dns_cluster_query) || :ignore},
      {Phoenix.PubSub, name: MtgDraftServer.PubSub},
      {Finch, name: MtgDraftServer.Finch},
      MtgDraftServerWeb.Endpoint,
      {Registry, keys: :unique, name: MtgDraftServer.DraftRegistry},
      MtgDraftServer.DraftSessionSupervisor
    ]

    opts = [strategy: :one_for_one, name: MtgDraftServer.Supervisor]
    Supervisor.start_link(children, opts)
  end

  @impl true
  def config_change(changed, _new, removed) do
    MtgDraftServerWeb.Endpoint.config_change(changed, removed)
    :ok
  end
end

=== File: lib/mtg_draft_server/auth_error_handler.ex ===

defmodule MtgDraftServer.AuthErrorHandler do
  import Plug.Conn

  def auth_error(conn, {type, _reason}, _opts) do
    body = Jason.encode!(%{error: to_string(type)})

    conn
    |> put_resp_content_type("application/json")
    |> send_resp(401, body)
  end
end

=== File: lib/mtg_draft_server/cards/card.ex ===

defmodule MtgDraftServer.Cards.Card do
  @derive {Jason.Encoder, only: [
    :id,
    :oracle_id,
    :name,
    :mana_cost,
    :cmc,
    :type_line,
    :oracle_text,
    :power,
    :toughness,
    :colors,
    :color_identity,
    :set_code,
    :rarity,
    :foil,
    :image_uris,
    :legalities,
    :inserted_at,
    :updated_at
  ]}
  use Ecto.Schema
  import Ecto.Changeset

  @primary_key {:id, :binary_id, autogenerate: true}  # Ensures id is binary_id
  @foreign_key_type :binary_id  # Ensures foreign keys also use binary_id
  schema "cards" do
    field :oracle_id, Ecto.UUID
    field :name, :string
    field :mana_cost, :string
    field :cmc, :float
    field :type_line, :string
    field :oracle_text, :string
    field :power, :string
    field :toughness, :string
    field :colors, {:array, :string}
    field :color_identity, {:array, :string}
    field :set_code, :string
    field :rarity, :string
    field :foil, :boolean, default: false
    field :image_uris, :map
    field :legalities, :map

    timestamps()
  end

  @doc false
  def changeset(card, attrs) do
    card
    |> cast(attrs, [
      :id,  # Keep id here to allow it to be cast
      :oracle_id,
      :name,
      :mana_cost,
      :cmc,
      :type_line,
      :oracle_text,
      :power,
      :toughness,
      :colors,
      :color_identity,
      :set_code,
      :rarity,
      :foil,
      :image_uris,
      :legalities
    ])
    |> validate_required([:oracle_id, :name, :set_code, :rarity])
  end
end

=== File: lib/mtg_draft_server/drafts/draft.ex ===

defmodule MtgDraftServer.Drafts.Draft do
  use Ecto.Schema
  import Ecto.Changeset

  @primary_key {:id, :binary_id, autogenerate: true}
  schema "drafts" do
    field :status, :string, default: "pending"
    timestamps()
  end

  def changeset(draft, attrs) do
    draft
    |> cast(attrs, [:status])
    |> validate_required([:status])
  end
end

=== File: lib/mtg_draft_server/drafts/draft_pick.ex ===

defmodule MtgDraftServer.Drafts.DraftPick do
  use Ecto.Schema
  import Ecto.Changeset

  schema "draft_picks" do
    field :card_id, :binary_id
    field :pack_number, :integer
    field :pick_number, :integer
    field :expires_at, :utc_datetime
    belongs_to :draft, MtgDraftServer.Drafts.Draft, type: :binary_id
    belongs_to :draft_player, MtgDraftServer.Drafts.DraftPlayer

    timestamps()
  end

  def changeset(draft_pick, attrs) do
    draft_pick
    |> cast(attrs, [
      :draft_id,
      :draft_player_id,
      :card_id,
      :pack_number,
      :pick_number,
      :expires_at
    ])
    |> validate_required([
      :draft_id,
      :draft_player_id,
      :card_id,
      :pack_number,
      :pick_number,
      :expires_at
    ])
  end
end

=== File: lib/mtg_draft_server/drafts/draft_player.ex ===

defmodule MtgDraftServer.Drafts.DraftPlayer do
  use Ecto.Schema
  import Ecto.Changeset

  schema "draft_players" do
    field :user_id, :string
    field :seat, :integer
    field :connected, :boolean, default: true
    belongs_to :draft, MtgDraftServer.Drafts.Draft, type: :binary_id

    timestamps()
  end

  def changeset(draft_player, attrs) do
    draft_player
    |> cast(attrs, [:draft_id, :user_id, :seat, :connected])
    |> validate_required([:draft_id, :user_id, :seat])
  end

  def create_draft_player(attrs) do
    %__MODULE__{}
    |> changeset(attrs)
    |> MtgDraftServer.Repo.insert()
  end
end

=== File: lib/mtg_draft_server/drafts.ex ===

defmodule MtgDraftServer.Drafts do
  @moduledoc """
  Context for managing drafts, players, and picks.

  In this Magic: The Gathering draft server:
    - A draft is created independently of any player.
    - When a player creates a draft, a corresponding draft_player record is created.
    - A player may only be in one active (pending/active) draft at a time.
    - Each draft supports a maximum of 8 players.
  """

  import Ecto.Query, warn: false
  alias MtgDraftServer.Repo
  alias MtgDraftServer.Drafts.{Draft, DraftPlayer, DraftPick}

  @one_day_in_seconds 86400

  @type error :: {:error, Ecto.Changeset.t() | String.t()}
  @type draft_result :: {:ok, Draft.t()} | error
  @type pick_result :: {:ok, DraftPick.t()} | error
  @type player_result :: {:ok, DraftPlayer.t()} | error

  @doc """
  Creates a new draft.

  Note that the draft itself is agnostic of a player.
  If a creator is provided in the attrs (using key `:creator`), a corresponding
  draft_player record is created.
  """
  @spec create_draft(map()) :: draft_result
  def create_draft(attrs \\ %{}) do
    Repo.transaction(fn ->
      with {:ok, draft} <- do_create_draft(attrs),
           {:ok, _player} <- maybe_create_player(draft, attrs[:creator]) do
        draft
      else
        error -> Repo.rollback(error)
      end
    end)
  end

  @doc """
  Creates a new draft, starts its draft-session GenServer,
  and (if a creator is provided) joins the creator into the draft.

  Before creating a new draft, it ensures that the player isn’t already
  in an active (pending or active) draft.
  """
  @spec create_and_join_draft(map()) :: {:ok, Draft.t()} | {:error, any()}
  def create_and_join_draft(attrs \\ %{}) do
    # If a creator is provided, ensure they are not already in an active draft.
    if creator = attrs[:creator] do
      case get_active_draft_for_player(creator) do
        nil -> :ok
        _ -> {:error, "Player already in an active draft"}
      end
    else
      :ok
    end
    |> case do
      :ok ->
        Repo.transaction(fn ->
          with {:ok, draft} <- do_create_draft(attrs),
               {:ok, _player} <- maybe_create_player(draft, attrs[:creator]) do
            # Start the draft session.
            {:ok, _pid} = MtgDraftServer.DraftSessionSupervisor.start_new_session(draft.id)
            # Have the creator join the draft session.
            if attrs[:creator] do
              :ok =
                MtgDraftServer.DraftSession.join(draft.id, %{user_id: attrs[:creator], seat: 1})
            end

            draft
          else
            error -> Repo.rollback(error)
          end
        end)

      error ->
        error
    end
  end

  @doc """
  Retrieves the most recent active draft for a given player.
  (An active draft is one whose status is either "pending" or "active".)
  """
  @spec get_active_draft_for_player(String.t()) :: DraftPlayer.t() | nil
  def get_active_draft_for_player(user_id) do
    query =
      from dp in DraftPlayer,
        join: d in Draft,
        on: dp.draft_id == d.id,
        where: dp.user_id == ^user_id and d.status in ["pending", "active"],
        order_by: [desc: dp.inserted_at],
        limit: 1,
        preload: [:draft]

    Repo.one(query)
  end

  @doc """
  Starts a draft by updating its status to "active".
  Validates that the draft exists and has at least 2 players.
  """
  @spec start_draft(binary()) :: draft_result
  def start_draft(draft_id) do
    with {:ok, draft} <- get_draft(draft_id),
         :ok <- validate_draft_can_start(draft),
         {:ok, updated_draft} <- do_start_draft(draft) do
      broadcast_draft_update(draft_id, :draft_started)
      {:ok, updated_draft}
    end
  end

  @doc """
  Records a card pick in the draft.
  Validates that the pick is legal and updates the draft state accordingly.
  """
  @spec pick_card(binary(), binary(), binary(), map()) :: pick_result
  def pick_card(draft_id, user_id, card_id, extra_attrs \\ %{}) do
    start_time = System.monotonic_time()

    result =
      with {:ok, draft} <- get_draft(draft_id),
           :ok <- validate_draft_active(draft),
           {:ok, draft_player} <- get_draft_player(draft_id, user_id),
           :ok <- validate_can_pick(draft_player, extra_attrs),
           {:ok, pick} <- do_create_pick(draft_id, draft_player, card_id, extra_attrs) do
        broadcast_draft_update(draft_id, {:pick_made, pick})
        {:ok, pick}
      end

    # Record telemetry for the pick action.
    end_time = System.monotonic_time()

    :telemetry.execute(
      [:mtg_draft_server, :drafts, :pick_card],
      %{duration: end_time - start_time},
      %{draft_id: draft_id, user_id: user_id}
    )

    result
  end

  @doc """
  Retrieves all picks for a given draft and player.
  """
  @spec get_picked_cards(binary(), binary()) :: [DraftPick.t()]
  def get_picked_cards(draft_id, user_id) do
    with {:ok, draft_player} <- get_draft_player(draft_id, user_id) do
      query =
        from pick in DraftPick,
          where: pick.draft_player_id == ^draft_player.id,
          order_by: [asc: pick.inserted_at],
          preload: [:card]

      Repo.all(query)
    else
      _error -> []
    end
  end

  @doc """
  Gets a draft by its ID.
  Returns `{:ok, draft}` if found, or `{:error, "Draft not found"}` if not.
  """
  @spec get_draft(binary()) :: draft_result
  def get_draft(draft_id) do
    case Cachex.get(:draft_cache, "draft:#{draft_id}") do
      {:ok, draft} when not is_nil(draft) ->
        {:ok, draft}

      _ ->
        case Repo.get(Draft, draft_id) do
          nil ->
            {:error, "Draft not found"}

          draft ->
            Cachex.put(:draft_cache, "draft:#{draft_id}", draft, ttl: :timer.minutes(5))
            {:ok, draft}
        end
    end
  end

  # ============================================================================
  # Private helper functions
  # ============================================================================

  defp do_create_draft(attrs) do
    %Draft{}
    |> Draft.changeset(attrs)
    |> Repo.insert()
  end

  defp do_start_draft(draft) do
    draft
    |> Draft.changeset(%{status: "active"})
    |> Repo.update()
  end

  defp do_create_pick(draft_id, draft_player, card_id, extra_attrs) do
    now = DateTime.utc_now() |> DateTime.truncate(:second)
    expires_at = DateTime.add(now, @one_day_in_seconds, :second)

    attrs =
      Map.merge(extra_attrs, %{
        "draft_id" => draft_id,
        "draft_player_id" => draft_player.id,
        "card_id" => card_id,
        "expires_at" => expires_at
      })

    %DraftPick{}
    |> DraftPick.changeset(attrs)
    |> Repo.insert()
  end

  def get_draft_player(draft_id, user_id) do
    case Repo.one(
           from dp in DraftPlayer,
             where: dp.draft_id == ^draft_id and dp.user_id == ^user_id,
             preload: [:draft]
         ) do
      nil -> {:error, "Player not found in draft"}
      player -> {:ok, player}
    end
  end

  # If no creator is provided, simply succeed.
  defp maybe_create_player(_draft, nil), do: {:ok, nil}

  # When a creator is provided, first check that the draft is not already full.
  defp maybe_create_player(draft, creator) do
    player_count =
      Repo.one(from dp in DraftPlayer, where: dp.draft_id == ^draft.id, select: count(dp.id))

    if player_count < 8 do
      DraftPlayer.create_draft_player(%{
        draft_id: draft.id,
        user_id: creator,
        seat: 1
      })
    else
      {:error, "Draft is full (max 8 players)"}
    end
  end

  defp validate_draft_can_start(draft) do
    with :ok <- validate_draft_status(draft),
         :ok <- validate_player_count(draft) do
      :ok
    end
  end

  defp validate_draft_status(draft) do
    if draft.status == "pending" do
      :ok
    else
      {:error, "Draft cannot be started from #{draft.status} status"}
    end
  end

  defp validate_player_count(draft) do
    player_count =
      Repo.one(from dp in DraftPlayer, where: dp.draft_id == ^draft.id, select: count(dp.id))

    if player_count >= 2 do
      :ok
    else
      {:error, "Draft needs at least 2 players to start"}
    end
  end

  defp validate_draft_active(draft) do
    if draft.status == "active" do
      :ok
    else
      {:error, "Draft is not active"}
    end
  end

  defp validate_can_pick(draft_player, attrs) do
    with :ok <- validate_pack_number(attrs["pack_number"]),
         :ok <- validate_pick_number(attrs["pick_number"]),
         :ok <- validate_player_turn(draft_player, attrs) do
      :ok
    end
  end

  defp validate_pack_number(pack_number) when pack_number in 1..3, do: :ok
  defp validate_pack_number(_), do: {:error, "Invalid pack number"}

  defp validate_pick_number(pick_number) when pick_number in 1..15, do: :ok
  defp validate_pick_number(_), do: {:error, "Invalid pick number"}

  defp validate_player_turn(_draft_player, _attrs) do
    # Implement turn-based validation here as needed.
    :ok
  end

  defp broadcast_draft_update(draft_id, event) do
    Phoenix.PubSub.broadcast(
      MtgDraftServer.PubSub,
      "draft:#{draft_id}",
      {event, draft_id}
    )
  end
end

=== File: lib/mtg_draft_server/draft_session.ex ===

defmodule MtgDraftServer.DraftSession do
  use GenServer

  @moduledoc """
  A GenServer that represents a draft session.
  """

  ## Client API

  @doc """
  Starts a draft session for a given draft_id.
  """
  def start_link(draft_id) do
    GenServer.start_link(__MODULE__, draft_id, name: via_tuple(draft_id))
  end

  @doc """
  Allows a player to join a draft session.
  """
  def join(draft_id, player) do
    GenServer.call(via_tuple(draft_id), {:join, player})
  end

  @doc """
  Retrieve the current state of the draft session.
  """
  def get_state(draft_id) do
    GenServer.call(via_tuple(draft_id), :get_state)
  end

  ## Helper for Registry lookup

  defp via_tuple(draft_id) do
    {:via, Registry, {MtgDraftServer.DraftRegistry, draft_id}}
  end

  ## Server Callbacks

  @impl true
  def init(draft_id) do
    state = %{
      draft_id: draft_id,
      # a map of user_id => player info
      players: %{},
      status: :pending
    }

    {:ok, state}
  end

  @impl true
  def handle_call({:join, player}, _from, state) do
    new_players = Map.put(state.players, player.user_id, player)

    new_state = %{state | players: new_players}

    # If the draft has reached 8 players, update the state and trigger any side effects
    new_state =
      if map_size(new_players) >= 8 and state.status != :active do
        # You might also want to persist this change to the DB
        broadcast_draft_started(state.draft_id)
        # Also trigger the creation of a new draft session so that new players aren’t
        # forced into a draft that is already full.
        spawn_new_draft()
        %{new_state | status: :active}
      else
        new_state
      end

    {:reply, :ok, new_state}
  end

  @impl true
  def handle_call(:get_state, _from, state) do
    {:reply, state, state}
  end

  defp broadcast_draft_started(draft_id) do
    Phoenix.PubSub.broadcast(
      MtgDraftServer.PubSub,
      "draft:#{draft_id}",
      {:draft_started, draft_id}
    )
  end

  defp spawn_new_draft do
    # For example, generate a new UUID for the draft (or use your Ecto workflow)
    new_draft_id = Ecto.UUID.generate()
    # You can also create a record in the database here if desired.
    MtgDraftServer.DraftSessionSupervisor.start_new_session(new_draft_id)
  end
end

=== File: lib/mtg_draft_server/draft_session_supervisor.ex ===

defmodule MtgDraftServer.DraftSessionSupervisor do
  use DynamicSupervisor

  def start_link(_args) do
    DynamicSupervisor.start_link(__MODULE__, :ok, name: __MODULE__)
  end

  @impl true
  def init(:ok) do
    DynamicSupervisor.init(strategy: :one_for_one)
  end

  @doc """
  Starts a new draft session.
  """
  def start_new_session(draft_id) do
    spec = {MtgDraftServer.DraftSession, draft_id}
    DynamicSupervisor.start_child(__MODULE__, spec)
  end
end

=== File: lib/mtg_draft_server/firebase_token.ex ===

defmodule MtgDraftServer.FirebaseToken do
  use Joken.Config

  @firebase_jwks_url "https://www.googleapis.com/service_accounts/v1/jwk/securetoken@system.gserviceaccount.com"

  def verify_firebase_token(nil), do: {:error, :no_token_provided}

  def verify_firebase_token(token) do
    with {:ok, %{body: body}} <-
           Finch.build(:get, @firebase_jwks_url) |> Finch.request(MtgDraftServer.Finch),
         {:ok, certs} <- Jason.decode(body),
         {:ok, header} <- Joken.peek_header(token),
         %{"kid" => kid} = header,
         {:ok, jwk} <- get_jwk(certs, kid),
         {true, jose_jwt, _} <- JOSE.JWT.verify(jwk, token),
         {_, claims} <- JOSE.JWT.to_map(jose_jwt) do
      {:ok, claims}
    else
      {:error, _} = err -> err
      _ -> {:error, :invalid_token}
    end
  end

  defp get_jwk(%{"keys" => keys}, kid) do
    keys
    |> Enum.find(fn key -> key["kid"] == kid end)
    |> case do
      nil -> {:error, :invalid_kid}
      key -> {:ok, JOSE.JWK.from_map(key)}
    end
  end
end

=== File: lib/mtg_draft_server/jwks_strategy.ex ===

defmodule MtgDraftServer.JWKSStrategy do
  use JokenJwks.DefaultStrategyTemplate

  def init_opts(_) do
    [
      jwks_url:
        "https://www.googleapis.com/service_accounts/v1/jwk/securetoken@system.gserviceaccount.com"
    ]
  end
end

=== File: lib/mtg_draft_server/pack_generator.ex ===

defmodule MtgDraftServer.Drafts.PackGenerator do
    @moduledoc """
    Generates booster packs for a draft based on the modern draft booster distribution.
  
    A modern draft booster (ignoring the marketing token) contains 15 Magic cards:
      - 1 Basic Land
      - 10 Common Cards
      - 3 Uncommon Cards
      - 1 Rare or Mythic Rare Card
  
    Additionally, there is a chance for one of the common cards to be replaced by a premium foil card
    (of any rarity). In that case the pack will have:
      - 1 Basic Land
      - 1 Foil Card
      - 9 Common Cards
      - 3 Uncommon Cards
      - 1 Rare or Mythic Rare Card
  
    Accepted options (opts):
      - :set_codes - a list of set codes (e.g. ["ulg", "m21"])
      - :allowed_rarities - a list of rarities to include (default: ["basic", "common", "uncommon", "rare", "mythic"])
      - :distribution - a map defining the default booster composition.
        Defaults to `%{"basic" => 1, "common" => 10, "uncommon" => 3, "rare" => 1}`.
  
    Additionally, packs can be distributed among players. For example, if a draft has 8 players,
    24 booster packs (8 × 3) will be generated and then grouped into three packs per player.
    """
  
    alias MtgDraftServer.Repo
    alias MtgDraftServer.Cards.Card
    import Ecto.Query
  
    @default_distribution %{"basic" => 1, "common" => 10, "uncommon" => 3, "rare" => 1}
    @foil_chance 0.25
  
    @doc """
    Prepares the booster pack card pool based on the provided options.
  
    This function:
      1. Parses the incoming options and fills in defaults.
      2. Queries the database for cards matching the provided set codes and allowed rarities.
      3. Groups the resulting cards by rarity.
  
    Returns a map with:
      - :opts - the parsed options
      - :rarity_groups - a map of rarity to a list of matching cards
    """
    def generate_booster_packs(opts \\ %{}) do
      parsed_opts = parse_opts(opts)
      cards = fetch_card_pool(parsed_opts)
      rarity_groups = group_cards_by_rarity(cards)
      %{opts: parsed_opts, rarity_groups: rarity_groups}
    end
  
    @doc """
    Generates a single booster pack using the given rarity groups and distribution.
  
    The process is as follows:
      1. Pick the required number of basic lands, commons, and uncommons.
      2. For the rare slot, combine the "rare" and "mythic" groups and pick one card.
      3. With a chance of #{@foil_chance * 100}%, select a foil card from all foil-eligible cards,
         remove one common card, and insert the foil.
      4. Shuffle the pack before returning it.
  
    Returns a list of cards representing the booster pack.
    """
    def generate_single_pack(rarity_groups, distribution) do
      basics    = Enum.take_random(Map.get(rarity_groups, "basic", []), distribution["basic"])
      commons   = Enum.take_random(Map.get(rarity_groups, "common", []), distribution["common"])
      uncommons = Enum.take_random(Map.get(rarity_groups, "uncommon", []), distribution["uncommon"])
      rare_pool = (Map.get(rarity_groups, "rare", []) ++ Map.get(rarity_groups, "mythic", []))
      rare      = Enum.take_random(rare_pool, distribution["rare"])
  
      initial_pack = basics ++ commons ++ uncommons ++ rare
  
      pack =
        if :rand.uniform() <= @foil_chance do
          case pick_foil_card(rarity_groups) do
            nil ->
              initial_pack
  
            foil_card ->
              if length(commons) > 0 do
                index = :rand.uniform(length(commons)) - 1
                new_commons = List.delete_at(commons, index)
                basics ++ new_commons ++ uncommons ++ rare ++ [foil_card]
              else
                initial_pack ++ [foil_card]
              end
          end
        else
          initial_pack
        end
  
      Enum.shuffle(pack)
    end
  
    @doc """
    Generates the specified number of booster packs using the provided rarity groups and distribution.
  
    By default, generates 24 packs (suitable for 8 players receiving 3 packs each).
    """
    def generate_all_packs(rarity_groups, distribution, num_packs \\ 24) do
      Enum.map(1..num_packs, fn _ -> generate_single_pack(rarity_groups, distribution) end)
    end
  
    @doc """
    Distributes booster packs to players.
  
    Given a list of players and a list of booster packs, groups the packs so that each player
    receives three packs. It assumes that length(packs) == length(players) * 3.
  
    Returns a map where keys are player identifiers (or player structs) and values are lists of packs.
    """
    def distribute_packs(packs, players) do
      packs_per_player = 3
      packs_chunks = Enum.chunk_every(packs, packs_per_player)
      Enum.zip(players, packs_chunks)
      |> Enum.into(%{})
    end
  
    @doc """
    Generates and distributes booster packs to the given players.
  
    * opts – options for pack generation (see generate_booster_packs/1)
    * players – a list of player identifiers (or player structs)
  
    Returns a map of player => list of booster packs.
    """
    def generate_and_distribute_booster_packs(opts \\ %{}, players) do
      %{opts: parsed_opts, rarity_groups: rarity_groups} = generate_booster_packs(opts)
      total_packs = length(players) * 3
      packs = generate_all_packs(rarity_groups, parsed_opts.distribution, total_packs)
      distribute_packs(packs, players)
    end
  
    # --- Private Helpers ---
  
    defp parse_opts(opts) do
      %{
        set_codes: Map.get(opts, :set_codes, []),
        allowed_rarities: Map.get(opts, :allowed_rarities, ["basic", "common", "uncommon", "rare", "mythic"]),
        distribution: Map.get(opts, :distribution, @default_distribution)
      }
    end
  
    defp fetch_card_pool(%{set_codes: set_codes, allowed_rarities: allowed_rarities}) do
      base_query =
        from card in Card,
          where: card.rarity in ^allowed_rarities
  
      query =
        if set_codes == [] do
          base_query
        else
          from card in base_query, where: card.set_code in ^set_codes
        end
  
      Repo.all(query)
    end
  
    defp group_cards_by_rarity(cards) do
      Enum.group_by(cards, & &1.rarity)
    end
  
    defp pick_foil_card(rarity_groups) do
      all_cards = Enum.flat_map(rarity_groups, fn {_rarity, cards} -> cards end)
      foil_pool = Enum.filter(all_cards, fn card -> card.foil end)
      case foil_pool do
        [] -> nil
        _ -> Enum.random(foil_pool)
      end
    end
  end
  
=== File: lib/mtg_draft_server/repo.ex ===

defmodule MtgDraftServer.Repo do
  use Ecto.Repo,
    otp_app: :mtg_draft_server,
    adapter: Ecto.Adapters.Postgres
end

=== File: lib/mtg_draft_server.ex ===

defmodule MtgDraftServer do
  @moduledoc """
  MtgDraftServer keeps the contexts that define your domain
  and business logic.

  Contexts are also responsible for managing your data, regardless
  if it comes from the database, an external API or others.
  """
end

=== File: lib/mtg_draft_server_web/controllers/default_controller.ex ===

# lib/mtg_draft_server_web/controllers/default_controller.ex
defmodule MtgDraftServerWeb.DefaultController do
  use MtgDraftServerWeb, :controller

  def index(conn, _params) do
    json(conn, %{
      message: "Welcome to MTG Draft Server API",
      version: "1.0",
      endpoints: %{
        drafts: %{
          create: "POST /api/drafts",
          start: "POST /api/drafts/:id/start",
          pick: "POST /api/drafts/:id/pick",
          picked_cards: "GET /api/drafts/:id/picks"
        }
      }
    })
  end
end

=== File: lib/mtg_draft_server_web/controllers/draft_controller.ex ===

defmodule MtgDraftServerWeb.DraftController do
  use MtgDraftServerWeb, :controller

  alias MtgDraftServer.Drafts

  action_fallback MtgDraftServerWeb.FallbackController

  @doc """
  Create a new draft using the Firebase authenticated user.
  """
  def create(conn, _params) do
    case conn.assigns[:current_user] do
      %{"uid" => uid} ->
        with {:ok, draft} <- Drafts.create_and_join_draft(%{creator: uid}) do
          conn
          |> put_status(:created)
          |> put_resp_header("location", "/api/drafts/#{draft.id}")
          |> json(%{draft_id: draft.id, status: draft.status})
        end

      _ ->
        conn
        |> put_status(:unauthorized)
        |> json(%{"error" => "Authentication required"})
    end
  end

  @doc """
  Start the draft by updating its status to "active".
  """
  def start(conn, %{"id" => draft_id}) do
    case conn.assigns[:current_user] do
      %{"uid" => uid} ->
        with {:ok, draft} <- Drafts.start_draft(draft_id),
             {:ok, _authorized} <- authorize_draft_action(draft, uid) do
          json(conn, %{draft_id: draft.id, status: draft.status})
        end

      _ ->
        conn
        |> put_status(:unauthorized)
        |> json(%{"error" => "Authentication required"})
    end
  end

  @doc """
  Persist a card pick.
  """
  def pick(conn, %{
        "id" => draft_id,
        "card_id" => card_id,
        "pack_number" => pack_number,
        "pick_number" => pick_number
      }) do
    case conn.assigns[:current_user] do
      %{"uid" => uid} ->
        with {:ok, _} <- ensure_in_draft_session(draft_id, uid),
             {:ok, draft} <- Drafts.get_draft(draft_id),
             {:ok, _authorized} <- authorize_draft_action(draft, uid),
             {:ok, pick} <-
               Drafts.pick_card(draft_id, uid, card_id, %{
                 "pack_number" => pack_number,
                 "pick_number" => pick_number
               }) do
          conn
          |> put_status(:created)
          |> json(%{pick: pick})
        end

      _ ->
        conn
        |> put_status(:unauthorized)
        |> json(%{"error" => "Authentication required"})
    end
  end

  @doc """
  Reconnect a user to their active draft session.
  """
  def reconnect(conn, _params) do
    case conn.assigns[:current_user] do
      %{"uid" => uid} ->
        case Drafts.get_active_draft_for_player(uid) do
          nil ->
            conn
            |> put_status(:not_found)
            |> json(%{error: "No active draft found for user"})

          draft_player ->
            draft_id = draft_player.draft.id

            case Registry.lookup(MtgDraftServer.DraftRegistry, draft_id) do
              [{_pid, _}] ->
                :ok = MtgDraftServer.DraftSession.join(draft_id, %{user_id: uid})
                json(conn, %{message: "Rejoined draft", draft_id: draft_id})

              [] ->
                {:ok, _pid} = MtgDraftServer.DraftSessionSupervisor.start_new_session(draft_id)
                :ok = MtgDraftServer.DraftSession.join(draft_id, %{user_id: uid})
                json(conn, %{message: "Draft session restarted and rejoined", draft_id: draft_id})
            end
        end

      _ ->
        conn
        |> put_status(:unauthorized)
        |> json(%{"error" => "Authentication required"})
    end
  end

  @doc """
  Get all picks for the current user in a given draft.
  """
  def picked_cards(conn, %{"id" => draft_id}) do
    case conn.assigns[:current_user] do
      %{"uid" => uid} ->
        with {:ok, draft} <- Drafts.get_draft(draft_id),
             {:ok, _authorized} <- authorize_draft_action(draft, uid) do
          picks = Drafts.get_picked_cards(draft_id, uid)
          json(conn, %{picks: picks})
        end

      _ ->
        conn
        |> put_status(:unauthorized)
        |> json(%{"error" => "Authentication required"})
    end
  end

  @doc """
  Generate booster packs and distribute them among players.

  Expects a JSON payload with keys:
    - "players": a list of player identifiers
    - "set_codes": a list of set codes (e.g. ["mh3", "stx", "war"])
    - Optionally, "allowed_rarities" and "distribution" can be provided.
  """
  def generate_booster_packs(conn, params) do
    players = Map.get(params, "players", [])

    opts = %{
      set_codes: Map.get(params, "set_codes", []),
      allowed_rarities:
        Map.get(params, "allowed_rarities", ["basic", "common", "uncommon", "rare", "mythic"]),
      distribution:
        Map.get(params, "distribution", %{
          "basic" => 1,
          "common" => 10,
          "uncommon" => 3,
          "rare" => 1
        })
    }

    packs_distribution = Drafts.PackGenerator.generate_and_distribute_booster_packs(opts, players)
    json(conn, packs_distribution)
  end

  # ===================
  # Helper Functions
  # ===================

  defp ensure_in_draft_session(draft_id, user_id) do
    :ok = MtgDraftServer.DraftSession.join(draft_id, %{user_id: user_id})
    {:ok, :joined}
  end

  defp authorize_draft_action(draft, user_id) do
    case MtgDraftServer.Drafts.get_draft_player(draft.id, user_id) do
      {:ok, _player} -> {:ok, true}
      _ -> {:error, "Unauthorized"}
    end
  end
end

=== File: lib/mtg_draft_server_web/controllers/error_json.ex ===

defmodule MtgDraftServerWeb.ErrorJSON do
  @moduledoc """
  This module is invoked by your endpoint in case of errors on JSON requests.

  See config/config.exs.
  """

  # If you want to customize a particular status code,
  # you may add your own clauses, such as:
  #
  # def render("500.json", _assigns) do
  #   %{errors: %{detail: "Internal Server Error"}}
  # end

  # By default, Phoenix returns the status message from
  # the template name. For example, "404.json" becomes
  # "Not Found".
  def render(template, _assigns) do
    %{errors: %{detail: Phoenix.Controller.status_message_from_template(template)}}
  end
end

=== File: lib/mtg_draft_server_web/controllers/fallback_controller.ex ===

defmodule MtgDraftServerWeb.FallbackController do
  use MtgDraftServerWeb, :controller

  # For Ecto errors, you might pattern match like this:
  def call(conn, {:error, %Ecto.Changeset{} = changeset}) do
    conn
    |> put_status(:unprocessable_entity)
    |> json(%{errors: changeset})
  end

  def call(conn, {:error, message}) when is_binary(message) do
    conn
    |> put_status(:bad_request)
    |> json(%{error: message})
  end
end

=== File: lib/mtg_draft_server_web/endpoint.ex ===

defmodule MtgDraftServerWeb.Endpoint do
  use Phoenix.Endpoint, otp_app: :mtg_draft_server

  # Force SSL in production if configured
  if Application.compile_env(:mtg_draft_server, :force_ssl, false) do
    plug Plug.SSL, rewrite_on: [:x_forwarded_proto]
  end

  # The session will be stored in the cookie and signed,
  # this means its contents can be read but not tampered with.
  # Set :encryption_salt if you would also like to encrypt it.
  @session_options [
    store: :cookie,
    key: "_mtg_draft_server_key",
    signing_salt: "WOTNq3DB",
    same_site: "Lax"
  ]

  # socket "/live", Phoenix.LiveView.Socket,
  #   websocket: [connect_info: [session: @session_options]],
  #   longpoll: [connect_info: [session: @session_options]]

  # Serve at "/" the static files from "priv/static" directory.
  #
  # You should set gzip to true if you are running phx.digest
  # when deploying your static files in production.
  plug Plug.Static,
    at: "/",
    from: :mtg_draft_server,
    gzip: false,
    only: MtgDraftServerWeb.static_paths()

  # Code reloading can be explicitly enabled under the
  # :code_reloader configuration of your endpoint.
  if code_reloading? do
    plug Phoenix.CodeReloader
    plug Phoenix.Ecto.CheckRepoStatus, otp_app: :mtg_draft_server
  end

  plug Plug.RequestId
  plug Plug.Telemetry, event_prefix: [:phoenix, :endpoint]

  plug Plug.Parsers,
    parsers: [:urlencoded, :multipart, :json],
    pass: ["*/*"],
    json_decoder: Phoenix.json_library()

  plug Plug.MethodOverride
  plug Plug.Head
  plug Plug.Session, @session_options

  plug CORSPlug,
    origin: ["http://localhost:5173"],
    methods: ["GET", "POST"],
    headers: ["Authorization", "Content-Type", "Accept"],
    expose: ["Authorization"],
    credentials: true,
    max_age: 86400

  plug MtgDraftServerWeb.Router
end

=== File: lib/mtg_draft_server_web/gettext.ex ===

defmodule MtgDraftServerWeb.Gettext do
  @moduledoc """
  A module providing Internationalization with a gettext-based API.

  By using [Gettext](https://hexdocs.pm/gettext),
  your module gains a set of macros for translations, for example:

      import MtgDraftServerWeb.Gettext

      # Simple translation
      gettext("Here is the string to translate")

      # Plural translation
      ngettext("Here is the string to translate",
               "Here are the strings to translate",
               3)

      # Domain-based translation
      dgettext("errors", "Here is the error message to translate")

  See the [Gettext Docs](https://hexdocs.pm/gettext) for detailed usage.
  """
  use Gettext.Backend, otp_app: :mtg_draft_server
end

=== File: lib/mtg_draft_server_web/plugs/auth_plug.ex ===

defmodule MtgDraftServerWeb.AuthPlug do
  import Plug.Conn
  alias MtgDraftServer.FirebaseToken

  def init(default), do: default

  def call(conn, _opts) do
    case get_req_header(conn, "authorization") do
      ["Bearer " <> token] ->
        verify_token(conn, token)

      _ ->
        conn
        |> send_resp(401, Jason.encode!(%{error: "Missing or invalid Authorization header"}))
        |> halt()
    end
  end

  defp verify_token(conn, token) do
    case FirebaseToken.verify_firebase_token(token) do
      {:ok, claims} ->
        IO.inspect(claims, label: "✅ Firebase Token Claims")
        # Map "user_id" to "uid" so controllers can consistently use "uid"
        claims = Map.put(claims, "uid", claims["user_id"])
        assign(conn, :current_user, claims)

      {:error, reason} ->
        IO.inspect(reason, label: "❌ Token Verification Failed")

        conn
        |> send_resp(401, Jason.encode!(%{error: "Invalid token"}))
        |> halt()
    end
  end
end

=== File: lib/mtg_draft_server_web/router.ex ===

defmodule MtgDraftServerWeb.Router do
  use MtgDraftServerWeb, :router

  alias MtgDraftServerWeb.AuthPlug

  pipeline :api do
    plug :accepts, ["json"]
  end

  pipeline :auth_api do
    plug :accepts, ["json"]
    plug AuthPlug
  end

  scope "/", MtgDraftServerWeb do
    pipe_through :api

    get "/", DefaultController, :index
  end

  scope "/api", MtgDraftServerWeb do
    pipe_through :auth_api

    post "/drafts", DraftController, :create
    post "/drafts/:id/start", DraftController, :start
    post "/drafts/:id/pick", DraftController, :pick
    get "/drafts/:id/picks", DraftController, :picked_cards
    post "/drafts/reconnect", DraftController, :reconnect

    # New route for booster pack generation
    post "/drafts/booster-packs", DraftController, :generate_booster_packs
  end
end

=== File: lib/mtg_draft_server_web/telemetry.ex ===

defmodule MtgDraftServerWeb.Telemetry do
  use Supervisor
  import Telemetry.Metrics

  def start_link(arg) do
    Supervisor.start_link(__MODULE__, arg, name: __MODULE__)
  end

  @impl true
  def init(_arg) do
    children = [
      # Telemetry poller will execute the given period measurements
      # every 10_000ms. Learn more here: https://hexdocs.pm/telemetry_metrics
      {:telemetry_poller, measurements: periodic_measurements(), period: 10_000}
      # Add reporters as children of your supervision tree.
      # {Telemetry.Metrics.ConsoleReporter, metrics: metrics()}
    ]

    Supervisor.init(children, strategy: :one_for_one)
  end

  def metrics do
    [
      # Phoenix Metrics
      summary("phoenix.endpoint.start.system_time",
        unit: {:native, :millisecond}
      ),
      summary("phoenix.endpoint.stop.duration",
        unit: {:native, :millisecond}
      ),
      summary("phoenix.router_dispatch.start.system_time",
        tags: [:route],
        unit: {:native, :millisecond}
      ),
      summary("phoenix.router_dispatch.exception.duration",
        tags: [:route],
        unit: {:native, :millisecond}
      ),
      summary("phoenix.router_dispatch.stop.duration",
        tags: [:route],
        unit: {:native, :millisecond}
      ),
      summary("phoenix.socket_connected.duration",
        unit: {:native, :millisecond}
      ),
      summary("phoenix.channel_joined.duration",
        unit: {:native, :millisecond}
      ),
      summary("phoenix.channel_handled_in.duration",
        tags: [:event],
        unit: {:native, :millisecond}
      ),

      # Database Metrics
      summary("mtg_draft_server.repo.query.total_time",
        unit: {:native, :millisecond},
        description: "The sum of the other measurements"
      ),
      summary("mtg_draft_server.repo.query.decode_time",
        unit: {:native, :millisecond},
        description: "The time spent decoding the data received from the database"
      ),
      summary("mtg_draft_server.repo.query.query_time",
        unit: {:native, :millisecond},
        description: "The time spent executing the query"
      ),
      summary("mtg_draft_server.repo.query.queue_time",
        unit: {:native, :millisecond},
        description: "The time spent waiting for a database connection"
      ),
      summary("mtg_draft_server.repo.query.idle_time",
        unit: {:native, :millisecond},
        description:
          "The time the connection spent waiting before being checked out for the query"
      ),

      # VM Metrics
      summary("vm.memory.total", unit: {:byte, :kilobyte}),
      summary("vm.total_run_queue_lengths.total"),
      summary("vm.total_run_queue_lengths.cpu"),
      summary("vm.total_run_queue_lengths.io")
    ]
  end

  defp periodic_measurements do
    [
      # A module, function and arguments to be invoked periodically.
      # This function must call :telemetry.execute/3 and a metric must be added above.
      # {MtgDraftServerWeb, :count_users, []}
    ]
  end
end

=== File: lib/mtg_draft_server_web.ex ===

defmodule MtgDraftServerWeb do
  @moduledoc """
  The entrypoint for defining your web interface, such
  as controllers, components, channels, and so on.

  This can be used in your application as:

      use MtgDraftServerWeb, :controller
      use MtgDraftServerWeb, :html

  The definitions below will be executed for every controller,
  component, etc, so keep them short and clean, focused
  on imports, uses and aliases.

  Do NOT define functions inside the quoted expressions
  below. Instead, define additional modules and import
  those modules here.
  """

  def static_paths, do: ~w(assets fonts images favicon.ico robots.txt)

  def router do
    quote do
      use Phoenix.Router, helpers: false

      # Import common connection and controller functions to use in pipelines
      import Plug.Conn
      import Phoenix.Controller
    end
  end

  def channel do
    quote do
      use Phoenix.Channel
    end
  end

  def controller do
    quote do
      use Phoenix.Controller,
        formats: [:html, :json],
        layouts: [html: MtgDraftServerWeb.Layouts]

      import Plug.Conn
      import MtgDraftServerWeb.Gettext

      unquote(verified_routes())
    end
  end

  def verified_routes do
    quote do
      use Phoenix.VerifiedRoutes,
        endpoint: MtgDraftServerWeb.Endpoint,
        router: MtgDraftServerWeb.Router,
        statics: MtgDraftServerWeb.static_paths()
    end
  end

  @doc """
  When used, dispatch to the appropriate controller/live_view/etc.
  """
  defmacro __using__(which) when is_atom(which) do
    apply(__MODULE__, which, [])
  end
end

=== File: mix.exs ===

defmodule MtgDraftServer.MixProject do
  use Mix.Project

  def project do
    [
      app: :mtg_draft_server,
      version: "0.1.0",
      elixir: "~> 1.14",
      elixirc_paths: elixirc_paths(Mix.env()),
      start_permanent: Mix.env() == :prod,
      aliases: aliases(),
      deps: deps()
    ]
  end

  # Configuration for the OTP application.
  #
  # Type `mix help compile.app` for more information.
  def application do
    [
      mod: {MtgDraftServer.Application, []},
      extra_applications: [:logger, :runtime_tools]
    ]
  end

  # Specifies which paths to compile per environment.
  defp elixirc_paths(:test), do: ["lib", "test/support"]
  defp elixirc_paths(_), do: ["lib"]

  # Specifies your project dependencies.
  #
  # Type `mix help deps` for examples and options.
  defp deps do
    [
      {:phoenix, "~> 1.7.14"},
      {:phoenix_ecto, "~> 4.5"},
      {:ecto_sql, "~> 3.10"},
      {:postgrex, ">= 0.0.0"},
      {:swoosh, "~> 1.5"},
      {:finch, "~> 0.13"},
      {:telemetry_metrics, "~> 1.0"},
      {:telemetry_poller, "~> 1.0"},
      {:gettext, "~> 0.20"},
      {:jason, "~> 1.2"},
      {:dns_cluster, "~> 0.1.1"},
      {:bandit, "~> 1.5"},
      {:cachex, "~> 3.6"},
      {:cors_plug, "~> 3.0"},
      {:joken, "~> 2.5"},
      {:joken_jwks, "~> 1.6"}
    ]
  end

  # Aliases are shortcuts or tasks specific to the current project.
  # For example, to install project dependencies and perform other setup tasks, run:
  #
  #     $ mix setup
  #
  # See the documentation for `Mix` for more info on aliases.
  defp aliases do
    [
      setup: ["deps.get", "ecto.setup"],
      "ecto.setup": ["ecto.create", "ecto.migrate", "run priv/repo/seeds.exs"],
      "ecto.reset": ["ecto.drop", "ecto.setup"],
      test: ["ecto.create --quiet", "ecto.migrate --quiet", "test"]
    ]
  end
end

=== File: priv/gettext/en/LC_MESSAGES/errors.po ===

## `msgid`s in this file come from POT (.pot) files.
##
## Do not add, change, or remove `msgid`s manually here as
## they're tied to the ones in the corresponding POT file
## (with the same domain).
##
## Use `mix gettext.extract --merge` or `mix gettext.merge`
## to merge POT files into PO files.
msgid ""
msgstr ""
"Language: en\n"

## From Ecto.Changeset.cast/4
msgid "can't be blank"
msgstr ""

## From Ecto.Changeset.unique_constraint/3
msgid "has already been taken"
msgstr ""

## From Ecto.Changeset.put_change/3
msgid "is invalid"
msgstr ""

## From Ecto.Changeset.validate_acceptance/3
msgid "must be accepted"
msgstr ""

## From Ecto.Changeset.validate_format/3
msgid "has invalid format"
msgstr ""

## From Ecto.Changeset.validate_subset/3
msgid "has an invalid entry"
msgstr ""

## From Ecto.Changeset.validate_exclusion/3
msgid "is reserved"
msgstr ""

## From Ecto.Changeset.validate_confirmation/3
msgid "does not match confirmation"
msgstr ""

## From Ecto.Changeset.no_assoc_constraint/3
msgid "is still associated with this entry"
msgstr ""

msgid "are still associated with this entry"
msgstr ""

## From Ecto.Changeset.validate_length/3
msgid "should have %{count} item(s)"
msgid_plural "should have %{count} item(s)"
msgstr[0] ""
msgstr[1] ""

msgid "should be %{count} character(s)"
msgid_plural "should be %{count} character(s)"
msgstr[0] ""
msgstr[1] ""

msgid "should be %{count} byte(s)"
msgid_plural "should be %{count} byte(s)"
msgstr[0] ""
msgstr[1] ""

msgid "should have at least %{count} item(s)"
msgid_plural "should have at least %{count} item(s)"
msgstr[0] ""
msgstr[1] ""

msgid "should be at least %{count} character(s)"
msgid_plural "should be at least %{count} character(s)"
msgstr[0] ""
msgstr[1] ""

msgid "should be at least %{count} byte(s)"
msgid_plural "should be at least %{count} byte(s)"
msgstr[0] ""
msgstr[1] ""

msgid "should have at most %{count} item(s)"
msgid_plural "should have at most %{count} item(s)"
msgstr[0] ""
msgstr[1] ""

msgid "should be at most %{count} character(s)"
msgid_plural "should be at most %{count} character(s)"
msgstr[0] ""
msgstr[1] ""

msgid "should be at most %{count} byte(s)"
msgid_plural "should be at most %{count} byte(s)"
msgstr[0] ""
msgstr[1] ""

## From Ecto.Changeset.validate_number/3
msgid "must be less than %{number}"
msgstr ""

msgid "must be greater than %{number}"
msgstr ""

msgid "must be less than or equal to %{number}"
msgstr ""

msgid "must be greater than or equal to %{number}"
msgstr ""

msgid "must be equal to %{number}"
msgstr ""

=== File: priv/gettext/errors.pot ===

## This is a PO Template file.
##
## `msgid`s here are often extracted from source code.
## Add new translations manually only if they're dynamic
## translations that can't be statically extracted.
##
## Run `mix gettext.extract` to bring this file up to
## date. Leave `msgstr`s empty as changing them here has no
## effect: edit them in PO (`.po`) files instead.
## From Ecto.Changeset.cast/4
msgid "can't be blank"
msgstr ""

## From Ecto.Changeset.unique_constraint/3
msgid "has already been taken"
msgstr ""

## From Ecto.Changeset.put_change/3
msgid "is invalid"
msgstr ""

## From Ecto.Changeset.validate_acceptance/3
msgid "must be accepted"
msgstr ""

## From Ecto.Changeset.validate_format/3
msgid "has invalid format"
msgstr ""

## From Ecto.Changeset.validate_subset/3
msgid "has an invalid entry"
msgstr ""

## From Ecto.Changeset.validate_exclusion/3
msgid "is reserved"
msgstr ""

## From Ecto.Changeset.validate_confirmation/3
msgid "does not match confirmation"
msgstr ""

## From Ecto.Changeset.no_assoc_constraint/3
msgid "is still associated with this entry"
msgstr ""

msgid "are still associated with this entry"
msgstr ""

## From Ecto.Changeset.validate_length/3
msgid "should have %{count} item(s)"
msgid_plural "should have %{count} item(s)"
msgstr[0] ""
msgstr[1] ""

msgid "should be %{count} character(s)"
msgid_plural "should be %{count} character(s)"
msgstr[0] ""
msgstr[1] ""

msgid "should be %{count} byte(s)"
msgid_plural "should be %{count} byte(s)"
msgstr[0] ""
msgstr[1] ""

msgid "should have at least %{count} item(s)"
msgid_plural "should have at least %{count} item(s)"
msgstr[0] ""
msgstr[1] ""

msgid "should be at least %{count} character(s)"
msgid_plural "should be at least %{count} character(s)"
msgstr[0] ""
msgstr[1] ""

msgid "should be at least %{count} byte(s)"
msgid_plural "should be at least %{count} byte(s)"
msgstr[0] ""
msgstr[1] ""

msgid "should have at most %{count} item(s)"
msgid_plural "should have at most %{count} item(s)"
msgstr[0] ""
msgstr[1] ""

msgid "should be at most %{count} character(s)"
msgid_plural "should be at most %{count} character(s)"
msgstr[0] ""
msgstr[1] ""

msgid "should be at most %{count} byte(s)"
msgid_plural "should be at most %{count} byte(s)"
msgstr[0] ""
msgstr[1] ""

## From Ecto.Changeset.validate_number/3
msgid "must be less than %{number}"
msgstr ""

msgid "must be greater than %{number}"
msgstr ""

msgid "must be less than or equal to %{number}"
msgstr ""

msgid "must be greater than or equal to %{number}"
msgstr ""

msgid "must be equal to %{number}"
msgstr ""

=== File: priv/repo/migrations/20250208230004_create_cards.exs ===

defmodule MtgDraftServer.Repo.Migrations.CreateCards do
  use Ecto.Migration

  def change do
    create table(:cards, primary_key: false) do
      add :id, :uuid, primary_key: true
      add :oracle_id, :uuid, null: false
      add :name, :string, null: false
      add :mana_cost, :string
      add :cmc, :float
      add :type_line, :string
      add :oracle_text, :text
      add :power, :string
      add :toughness, :string
      add :colors, {:array, :string}
      add :color_identity, {:array, :string}

      # NEW FIELDS FOR BOOSTER GENERATION
      add :set_code, null: false :string
      add :rarity, :string
      add :foil, :boolean, default: false

      add :image_uris, :map
      add :legalities, :map

      timestamps()
    end

    create unique_index(:cards, [:oracle_id])
    create unique_index(:cards, [:name])
  end
end

=== File: priv/repo/migrations/20250209005129_create_drafts.exs ===

defmodule MtgDraftServer.Repo.Migrations.CreateDrafts do
  use Ecto.Migration

  def change do
    create table(:drafts, primary_key: false) do
      add :id, :uuid, primary_key: true
      # Use a string status (e.g., "pending", "active", "complete")
      add :status, :string, default: "pending"
      timestamps()
    end
  end
end

=== File: priv/repo/migrations/20250209005146_create_draft_players.exs ===

defmodule MtgDraftServer.Repo.Migrations.CreateDraftPlayers do
  use Ecto.Migration

  def change do
    create table(:draft_players) do
      add :draft_id, references(:drafts, type: :uuid, on_delete: :delete_all), null: false
      # Storing the Firebase UID (or any user identifier) as a string:
      add :user_id, :string, null: false
      add :seat, :integer, null: false
      # Optionally track connection status for handling disconnects:
      add :connected, :boolean, default: true

      timestamps()
    end

    create index(:draft_players, [:draft_id])
    create unique_index(:draft_players, [:draft_id, :user_id])
  end
end

=== File: priv/repo/migrations/20250209005217_create_draft_picks.exs ===

defmodule MtgDraftServer.Repo.Migrations.CreateDraftPicks do
  use Ecto.Migration

  def change do
    create table(:draft_picks) do
      add :draft_id, references(:drafts, type: :uuid, on_delete: :delete_all), null: false
      add :draft_player_id, references(:draft_players, on_delete: :delete_all), null: false
      add :card_id, references(:cards, type: :uuid, on_delete: :nothing), null: false
      # 1, 2, or 3
      add :pack_number, :integer, null: false
      # Order of the pick within the pack
      add :pick_number, :integer, null: false

      timestamps()
    end

    create index(:draft_picks, [:draft_id])
    create index(:draft_picks, [:draft_player_id])
    create index(:draft_picks, [:card_id])
  end
end

=== File: priv/repo/seeds.exs ===

alias MtgDraftServer.Repo
alias MtgDraftServer.Cards.Card

"priv/repo/data/oracle_cards.json"
|> File.read!()
|> Jason.decode!()
|> Enum.each(fn card_attrs ->
  %Card{}
  |> Card.changeset(card_attrs)
  |> Repo.insert!(on_conflict: :nothing)
end)

=== File: priv/static/robots.txt ===

# See https://www.robotstxt.org/robotstxt.html for documentation on how to use the robots.txt file
#
# To ban all spiders from the entire site uncomment the next two lines:
# User-agent: *
# Disallow: /
