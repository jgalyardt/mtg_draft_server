I need you help adjusting my Elixir server that manages Magic the Gathering Drafts.
I've built some tests, and now Im getting the following output from mix test:

$ mix test
Running ExUnit with seed: 52470, max_cases: 32

.......    warning: MtgDraftServerWeb.Router.Helpers.api_draft_path/2 is undefined (module MtgDraftServerWeb.Router.Helpers is not available or is yet to be defined)
    │
 14 │     conn = post(conn, Routes.api_draft_path(conn, :create), %{})
    │                              ~
    │
    └─ test/mtg_draft_server_web/controllers/controllers/draft_controller_test.exs:14:30: MtgDraftServerWeb.DraftControllerTest."test POST /api/drafts creates a new draft"/1

    warning: MtgDraftServerWeb.Router.Helpers.api_draft_path/3 is undefined (module MtgDraftServerWeb.Router.Helpers is not available or is yet to be defined)
    │
 22 │     conn = post(conn, Routes.api_draft_path(conn, :join, draft.id))
    │                              ~
    │
    └─ test/mtg_draft_server_web/controllers/controllers/draft_controller_test.exs:22:30: MtgDraftServerWeb.DraftControllerTest."test POST /api/drafts/:id/join allows a user to join a draft"/1    

.20:24:04.371 [error] GenServer {MtgDraftServer.DraftRegistry, "80e1c826-3a1e-4218-953c-e230dc408c24"} terminating
** (DBConnection.OwnershipError) cannot find ownership process for #PID<0.417.0>.

When using ownership, you must manage connections in one
of the four ways:

* By explicitly checking out a connection
* By explicitly allowing a spawned process
* By running the pool in shared mode
* By using :caller option with allowed process

The first two options require every new process to explicitly
check a connection out or be allowed by calling checkout or
allow respectively.

The third option requires a {:shared, pid} mode to be set.
If using shared mode in tests, make sure your tests are not
async.

The fourth option requires [caller: pid] to be used when
checking out a connection from the pool. The caller process
should already be allowed on a connection.

If you are reading this error, it means you have not done one
of the steps above or that the owner process has crashed.

    (db_connection 2.7.0) lib/db_connection.ex:1088: DBConnection.transaction/3
    (mtg_draft_server 0.1.0) lib/mtg_draft_server/draft_session.ex:193: MtgDraftServer.DraftSession.handle_real_booster_pick/3
    (mtg_draft_server 0.1.0) lib/mtg_draft_server/draft_session.ex:139: MtgDraftServer.DraftSession.handle_cast/2
    (stdlib 6.2) gen_server.erl:2371: :gen_server.try_handle_cast/3
    (stdlib 6.2) gen_server.erl:2433: :gen_server.handle_msg/6
    (stdlib 6.2) proc_lib.erl:329: :proc_lib.init_p_do_apply/3
Last message: {:"$gen_cast", {:pick, "player1", "card1"}}


  1) test picking a card updates the session state (MtgDraftServer.DraftSessionTest)
     test/mtg_draft_server/cards/draft_session_test.exs:20
     Assertion with == failed
     code:  assert length(pack) == 1
     left:  0
     right: 1
     stacktrace:
       test/mtg_draft_server/cards/draft_session_test.exs:53: (test)

.....

  2) test POST /api/drafts creates a new draft (MtgDraftServerWeb.DraftControllerTest)
     test/mtg_draft_server_web/controllers/controllers/draft_controller_test.exs:13
     ** (UndefinedFunctionError) function MtgDraftServerWeb.Router.Helpers.api_draft_path/2 is undefined (module MtgDraftServerWeb.Router.Helpers is not available)
     code: conn = post(conn, Routes.api_draft_path(conn, :create), %{})
     stacktrace:
       MtgDraftServerWeb.Router.Helpers.api_draft_path(%Plug.Conn{adapter: {Plug.Adapters.Test.Conn, :...}, assigns: %{current_user: %{"uid" => "user_123"}}, body_params: %Plug.Conn.Unfetched{aspect: :body_params}, cookies: %Plug.Conn.Unfetched{aspect: :cookies}, halted: false, host: "www.example.com", method: "GET", owner: #PID<0.435.0>, params: %Plug.Conn.Unfetched{aspect: :params}, path_info: [], path_params: %{}, port: 80, private: %{plug_skip_csrf_protection: true, phoenix_recycled: true}, query_params: %Plug.Conn.Unfetched{aspect: :query_params}, query_string: "", remote_ip: {127, 0, 0, 1}, req_cookies: %Plug.Conn.Unfetched{aspect: :cookies}, req_headers: [], request_path: "/", resp_body: nil, resp_cookies: %{}, resp_headers: [{"cache-control", "max-age=0, private, must-revalidate"}], scheme: :http, script_name: [], secret_key_base: nil, state: :unset, status: nil}, :create)
       test/mtg_draft_server_web/controllers/controllers/draft_controller_test.exs:14: (test)     



  3) test POST /api/drafts/:id/join allows a user to join a draft (MtgDraftServerWeb.DraftControllerTest)
     test/mtg_draft_server_web/controllers/controllers/draft_controller_test.exs:20
     ** (UndefinedFunctionError) function MtgDraftServerWeb.Router.Helpers.api_draft_path/3 is undefined (module MtgDraftServerWeb.Router.Helpers is not available)
     code: conn = post(conn, Routes.api_draft_path(conn, :join, draft.id))
     stacktrace:
       MtgDraftServerWeb.Router.Helpers.api_draft_path(%Plug.Conn{adapter: {Plug.Adapters.Test.Conn, :...}, assigns: %{current_user: %{"uid" => "user_123"}}, body_params: %Plug.Conn.Unfetched{aspect: :body_params}, cookies: %Plug.Conn.Unfetched{aspect: :cookies}, halted: false, host: "www.example.com", method: "GET", owner: #PID<0.439.0>, params: %Plug.Conn.Unfetched{aspect: :params}, path_info: [], path_params: %{}, port: 80, private: %{plug_skip_csrf_protection: true, phoenix_recycled: true}, query_params: %Plug.Conn.Unfetched{aspect: :query_params}, query_string: "", remote_ip: {127, 0, 0, 1}, req_cookies: %Plug.Conn.Unfetched{aspect: :cookies}, req_headers: [], request_path: "/", resp_body: nil, resp_cookies: %{}, resp_headers: [{"cache-control", "max-age=0, private, must-revalidate"}], scheme: :http, script_name: [], secret_key_base: nil, state: :unset, status: nil}, :join, "a83149a3-5311-49ae-8440-203d29a894dd")
       test/mtg_draft_server_web/controllers/controllers/draft_controller_test.exs:22: (test)     


Finished in 0.4 seconds (0.2s async, 0.1s sync)
16 tests, 3 failures


My project files are as follows:

