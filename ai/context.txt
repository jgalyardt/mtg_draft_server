I am building an elixir phoenix server to host Magic the Gathering drafts.
Players can join, and once the draft hits 8 players, it will start.

When I pick a card, I am told that it was picked, and this is what I see on the front end:

<div data-v-3c270dc2="" class="draft-board"><!-- Upper Section: Live Draft Board --><div data-v-3c270dc2="" class="upper-section"><h1 data-v-3c270dc2="">Draft Board</h1><div data-v-3c270dc2="" class="draft-info"><p data-v-3c270dc2="">Draft ID: 57f135fb-52a3-4e43-85bf-822b93579c98</p><p data-v-3c270dc2="">Pack: 1 / Pick: 1</p></div><!-- Current Pack for Picking --><div data-v-3c270dc2="" class="waiting-message"><h2 data-v-3c270dc2="">Waiting for your next pack...</h2><p data-v-3c270dc2="">You'll get a new pack to pick from when it's your turn.</p></div><div data-v-004fe049="" data-v-3c270dc2="" class="error-message"><div data-v-004fe049="" class="error-content">Card selected! <!--v-if--></div></div></div><!-- Lower Section: Deck Builder --><div data-v-3c270dc2="" class="lower-section"><h2 data-v-3c270dc2="">Your Deck (0)</h2><div data-v-3c270dc2="" class="deck-columns"><!-- Loop over each mana column --></div></div></div>


The state coming from the server:

{
    "status": "pending",
    "pack_number": 1,
    "pick_number": 1,
    "current_pack": [],
    "is_your_turn": false
}


Can you help figure out what's happening? Here is the draft board view on the client:

<template>
  <div class="draft-board">
    <!-- Upper Section: Live Draft Board -->
    <div class="upper-section">
      <h1>Draft Board</h1>
      <div class="draft-info">
        <p>Draft ID: {{ draftId }}</p>
        <p>Pack: {{ packNumber }} / Pick: {{ pickNumber }}</p>
      </div>

      <!-- Current Pack for Picking -->
      <div v-if="currentPack && currentPack.length > 0" class="current-pack">
        <h2>Pick a Card</h2>
        <div class="cards-container">
          <div 
            v-for="card in currentPack" 
            :key="card.id" 
            class="card-slot"
            @click="selectCard(card.id)"
          >
            <img 
              :src="card.image_uris?.normal || card.image_uris?.small || '/placeholder-card.jpg'" 
              :alt="card.name" 
              class="card-image"
            />
          </div>
        </div>
      </div>
      <div v-else class="waiting-message">
        <h2>Waiting for your next pack...</h2>
        <p>You'll get a new pack to pick from when it's your turn.</p>
      </div>

      <ErrorDisplay :message="message" v-if="message" />
    </div>

    <!-- Lower Section: Deck Builder -->
    <div class="lower-section">
      <h2>Your Deck ({{ totalCards }})</h2>
      <div class="deck-columns">
        <!-- Loop over each mana column -->
        <div 
          v-for="(column, colIndex) in deckColumns" 
          :key="column.mana" 
          class="deck-column"
        >
          <div class="mana-header">Mana: {{ column.mana }}</div>
          <!-- Use draggable for card ordering -->
          <draggable 
            v-model="column.cards" 
            :group="{ name: 'cards', pull: true, put: true }" 
            item-key="id" 
            animation="200" 
            class="card-stack"
          >
            <template #item="{ element }">
              <div class="deck-card">
                <img 
                  :src="element.image_uris?.normal || element.image_uris?.small || '/placeholder-card.jpg'" 
                  :alt="element.name" 
                  class="card-image"
                />
              </div>
            </template>
          </draggable>
        </div>
      </div>
    </div>
  </div>
</template>

<script setup>
import { ref, onMounted, onUnmounted, computed } from 'vue'
import { useRoute } from 'vue-router'
import { getPickedCards, pickCard, getDraftState } from '@/api/draft'
import ErrorDisplay from '@/components/ErrorDisplay.vue'
import draggable from 'vuedraggable'

const route = useRoute()
const draftId = ref(route.params.id || localStorage.getItem('draftId'))
const currentPack = ref([])
const pickedCards = ref([])
const message = ref('')
const isError = ref(false)
const packNumber = ref(1)
const pickNumber = ref(1)
const pollInterval = ref(null)

// Reactive deck builder state â€“ an array of column objects (each with a mana value and an array of cards)
const deckColumns = ref([])

// Compute total number of cards for display
const totalCards = computed(() => {
  return deckColumns.value.reduce((sum, col) => sum + col.cards.length, 0)
})

// Group picked cards by their mana cost (cmc) and update the deckColumns state
const initializeDeckColumns = () => {
  const groups = {}
  pickedCards.value.forEach(pick => {
    // Default to 0 if "cmc" is not defined.
    const mana = pick.card.cmc !== undefined ? pick.card.cmc : 0
    if (!groups[mana]) groups[mana] = []
    groups[mana].push(pick.card)
  })
  // Create columns sorted by mana cost
  const sortedKeys = Object.keys(groups).map(Number).sort((a, b) => a - b)
  deckColumns.value = sortedKeys.map(mana => ({
    mana,
    cards: groups[mana]
  }))
}

// Fetch the draft state (including the current pack)
const fetchDraftState = async () => {
  try {
    const data = await getDraftState(draftId.value)
    currentPack.value = data.is_your_turn ? (data.current_pack || []) : []
    packNumber.value = data.pack_number || 1
    pickNumber.value = data.pick_number || 1
    if (data.status === 'complete') {
      message.value = 'Draft complete! Check your picks.'
      stopPolling()
    }
  } catch (error) {
    console.error('Error fetching draft state:', error)
    if (!isError.value) {
      message.value = error.message
    }
  }
}

// Called when the user picks a card
const selectCard = async (cardId) => {
  try {
    isError.value = false
    message.value = 'Submitting your pick...'
    await pickCard(draftId.value, cardId, packNumber.value, pickNumber.value)
    message.value = 'Card selected!'
    currentPack.value = []  // Clear pack for immediate feedback

    // Fetch updated picks and update deckColumns
    await fetchPickedCards()
    initializeDeckColumns()
  } catch (error) {
    message.value = error.message
  }
}

// Fetch the player's picked cards
const fetchPickedCards = async () => {
  try {
    const data = await getPickedCards(draftId.value)
    pickedCards.value = data.picks || []
  } catch (error) {
    console.error('Error fetching picked cards:', error)
  }
}

// Polling for draft state updates every 2 seconds
const startPolling = () => {
  pollInterval.value = setInterval(async () => {
    await fetchDraftState()
  }, 2000)
}
const stopPolling = () => {
  if (pollInterval.value) {
    clearInterval(pollInterval.value)
    pollInterval.value = null
  }
}

// On component mount, fetch the initial state and start polling
onMounted(async () => {
  if (!draftId.value) {
    message.value = error.message
    return
  }
  localStorage.setItem('draftId', draftId.value)
  try {
    await fetchPickedCards()
    initializeDeckColumns()
    await fetchDraftState()
    startPolling()
  } catch (error) {
    message.value = error.message
  }
})

// Clean up when unmounted
onUnmounted(() => {
  stopPolling()
})
</script>